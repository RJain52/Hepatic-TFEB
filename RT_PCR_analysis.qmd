---
title: "RT-PCR"
author: "Raghav Jain"
format: html
editor: visual
---

# 1. Load Packages

```{r}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(scales)){install.packages("scales")}
if(!require(readxl)){install.packages("readxl")} 
if(!require(reshape)){install.packages("reshape")}
if(!require(Cairo)){install.packages("Cairo")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(rstatix)){install.packages("rstatix")}
pal_33 <- c("#D51317", "#164194")
pal_45 <- c("#D51317", "#164194", "#F39200FF", "#31B7BCFF")
pal_cells <- c("#706F6FFF", "#007B3DFF", "#EFC000FF", "#6F286AFF")
```

# 2. Exp 45 Knockdown transcripts

```{r}
# Initial qPCR
mdat <- read_excel("data/qPCR/2023_0106_qPCR_TFEB_KD_at1.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Ketone targets
mdat <- read_excel("data/qPCR/2023_0120_Exp45 ketone_targets.xlsx",
                 sheet = 'Results', 
                 range = "A37:AK377", 
                 trim_ws = T)

mdat <- mdat[rowSums(is.na(mdat)) != ncol(mdat),]

# Remove standard rows
mdat <- mdat |> filter(Task == "UNKNOWN")

# Subset out the relevant data
Y <- mdat |> select(`Sample Name`, `Target Name`, 
                    `CT`, `Quantity Mean`,
                    `Ct SD`, `Quantity`)   


# Convert CT and quantity to number instead of character values
Y <- Y |> mutate(across(CT:Quantity, ~as.numeric(.))
                 )

# When the target was not present in the sample, the last 3 columns will have NA
# Replace NA with value (0) that will pass the filters 
Y <- Y |> mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)
                 )
# Remove values with CT >30, CT SD > 0.90 [prefer 0.60 but data dependent]
Y <- Y |> filter(!CT > 30, !`Ct SD` > 0.90)

# Make gene name factor
Y$`Target Name` <- as.factor(Y$`Target Name`)

# Normalize to each samples RPS3
Y <- Y |> group_by(`Sample Name`) |>
  mutate(norm_quant = Quantity/Quantity[`Target Name`=="RPS3"])

# Remove RPS3
Y <- Y |> filter(!`Target Name` == "RPS3") |> 
  droplevels()

Y$Condition <- gsub(" [[:digit:]]+", "", Y$`Sample Name`)
Y$Condition <- gsub(" ", "_", Y$Condition)
Y$Condition <- gsub("TFEB_", "", Y$Condition)

Y$Condition <- factor(Y$Condition, 
                      levels = c("Con_RT", "Con_Cold",
                                 "KD_RT", "KD_Cold")
                      )

# Graph stuff
targets <-as.vector(names(table(Y$`Target Name`)))
plot_list <- list()

# Define x-axis variable
a = "Condition"

# Define y-axis variable
b = "norm_quant"

# Define additional variable related to color (if none, set equal to a)
c = a

for (i in 1:length(targets)) {
  temp <- Y |> filter(`Target Name` %in% targets[i]) |>
    droplevels()
  
  p0 <- ggbarplot(temp, x = a, y = b,
                  add = c("mean_sd", "dotplot"), 
                  color = a, fill = a, 
                  error.plot = "errorbar", 
                  add.params = list(width = 0.2, color = "grey23",
                  binwidth = 0.01*max(temp$norm_quant, na.rm = T)),
                  position = position_dodge(0.8), size = 0.10) + 
    scale_y_continuous(limits = c(0.00, 1.4*max(temp$norm_quant, na.rm = T)),
                       expand = c(0,0)
                       ) +
    scale_x_discrete(guide = guide_axis(angle = 45))
  
  p1 <- ggpar(p0, palette = pal_45, title = temp$`Target Name`[1],  
              xlab = "", ylab = "Normalized RNA Abundance") +
    scale_color_manual(values = c("black", "black", "black", "black")
                       ) +
    theme_bw(base_size = 16, base_family = "Arial")

  stat.test <- temp |>
    group_by(`Target Name`) |>
    t_test(norm_quant ~ Condition) |>
    adjust_pvalue(method = "none") %>%
    add_significance("p")
  
  stat.test$p.adj.signif <- stat.test$p.signif # If you don't run this, adjusted p-values plot
  stat.test <- stat.test |> add_xy_position(fun = "mean_sd", x = a, dodge = 0.8)

  p2 <- p1 + stat_pvalue_manual(
      stat.test, label = "p.signif", 
      hide.ns = T, size = 8
      )

    plot_list[[i]] = p2

}

CairoPDF(file = "output/Fig4/2023_0329_Exp45_KD_ketone_all.pdf", height = 10, width = 8)
  for (i in 1:length(targets)) {
    print(plot_list[[i]])
  }
dev.off()

# TFEB KD Validation
Y1 <- Y |> filter(`Target Name` == "TFEB") |>
  droplevels()

p0 <- ggbarplot(Y1, x = "Condition", y = "norm_quant",
                  add = c("mean_sd", "dotplot"), 
                  color = "Condition", fill = "Condition", 
                  error.plot = "errorbar", 
                  add.params = list(width = 0.2,
                  binwidth = 0.015*max(Y1$norm_quant, na.rm = T)),
                  position = position_dodge(0.8), size = 0.10) + 
    scale_y_continuous(limits = c(0.00, 1.3*max(Y1$norm_quant, na.rm = T)),
                       expand = c(0,0)
                       ) 
  
p1 <- ggpar(p0, palette = pal_45, title = "Exp45 TFEB qPCR",  
              xlab = "", ylab = "Normalized RNA Abundance") +
    scale_color_manual(values = c("black", "black", "black", "black")
                       ) +
    theme_bw(base_size = 16, base_family = "Arial")

stat.test <- Y1 |>
    group_by(`Target Name`) |>
    t_test(norm_quant ~ Condition) |>
    adjust_pvalue(method = "none") %>%
    add_significance("p")
  
stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test |>
  add_xy_position(fun = "mean_sd", x = "Condition", dodge = 0.8)

p2 <- p1 + stat_pvalue_manual(
  stat.test, label = "p.signif",
  hide.ns = T, size = 8)

p2

CairoPDF(file = "output/Fig4/Fig4A_Exp45_TFEB_qPCR_at2.pdf",
         height = 8, width = 10)
  print(p2)
dev.off()
```

## Jess follow up

```{r}
# Mito targets
mdat <- read_excel("data/qPCR/2023_0420_Exp45_TFEB_KD_mito_targets.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Mito and lyso targets
mdat <- read_excel("data/qPCR/2023_0423_Exp45_liver_mitolyso_targets.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Mito and lyso targets [lyso all]
mdat <- read_excel("data/qPCR/2023_0423_Exp45_liver_TFEB_targets.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# M6pr and Abhd6
mdat <- read_excel("data/qPCR/2023_0424_Exp45_liver_targets_02.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

mdat <- mdat[rowSums(is.na(mdat)) != ncol(mdat),]

# Remove standard rows
mdat <- mdat |> filter(Task == "UNKNOWN")

# Subset out the relevant data
Y <- mdat |> select(`Sample Name`, `Target Name`, 
                    `CT`, `Quantity Mean`,
                    `Ct SD`, `Quantity`)   


# Convert CT and quantity to number instead of character values
Y <- Y |> mutate(across(CT:Quantity, ~as.numeric(.))
                 )

# When the target was not present in the sample, the last 3 columns will have NA
# Replace NA with value (0) that will pass the filters 
Y <- Y |> mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)
                 )

Y <- Y |> mutate(`Ct SD` = ifelse(is.na(`Ct SD`), 0, `Ct SD`)
                 )
# Remove values with CT >30, CT SD > 0.90 [prefer 0.60 but data dependent]
Y <- Y |> filter(!CT > 30, !`Ct SD` > 0.90)

# Remove Sqstm1 from M6pr and Abhd6 as two peaks in melt curve

Y <- Y |> filter(!`Target Name` == "Sqstm1")

# Make gene name factor
Y$`Target Name` <- as.factor(Y$`Target Name`)

# Normalize to each samples RPS3
Y <- Y |> group_by(`Sample Name`) |>
  mutate(norm_quant = Quantity/mean(Quantity[`Target Name`=="RPS3"])
  )

# Remove RPS3
Y <- Y |> filter(!`Target Name` == "RPS3") |> 
  droplevels()

Y$Condition <- gsub(" [[:digit:]]+", "", Y$`Sample Name`)
Y$Condition <- gsub(" ", "_", Y$Condition)

# for mito targets
Y$Condition <- factor(Y$Condition, 
                      levels = c("RT_Con", "Cold_Con",
                                 "RT_KD", "Cold_KD"),
                      labels = c(RT_Con = "Con_RT", Cold_Con = "Con_Cold",
                                 RT_KD = "KD_RT", Cold_KD = "KD_Cold")
                      )

Y$Condition <- factor(Y$Condition, 
                      levels = c("Con_RT", "Con_Cold",
                                 "KD_RT", "KD_Cold")
                      )

# For mito_lyso targets (cpt1b)
Y <- Y |> filter(!`Sample Name` == "Con RT 5")

# Graph stuff
targets <-as.vector(names(table(Y$`Target Name`)))
plot_list <- list()

# Define x-axis variable
a = "Condition"

# Define y-axis variable
b = "norm_quant"

# Define additional variable related to color (if none, set equal to a)
c = a

for (i in 1:length(targets)) {
  temp <- Y |> filter(`Target Name` %in% targets[i]) |>
    droplevels()
  
  p0 <- ggbarplot(temp, x = a, y = b,
                  add = c("mean_sd", "dotplot"), 
                  color = a, fill = a, 
                  error.plot = "errorbar", 
                  add.params = list(width = 0.2, color = "grey23",
                  binwidth = 0.01*max(temp$norm_quant, na.rm = T)),
                  position = position_dodge(0.8), size = 0.10) + 
    scale_y_continuous(limits = c(0.00, 1.4*max(temp$norm_quant, na.rm = T)),
                       expand = c(0,0)
                       ) +
    scale_x_discrete(guide = guide_axis(angle = 45))
  
  p1 <- ggpar(p0, palette = pal_45, title = temp$`Target Name`[1],  
              xlab = "", ylab = "Normalized RNA Abundance") +
    scale_color_manual(values = c("black", "black", "black", "black")
                       ) +
    theme_bw(base_size = 16, base_family = "Arial")

  stat.test <- temp |>
    group_by(`Target Name`) |>
    t_test(norm_quant ~ Condition) |>
    adjust_pvalue(method = "none") %>%
    add_significance("p")
  
  stat.test$p.adj.signif <- stat.test$p.signif # If you don't run this, adjusted p-values plot
  stat.test <- stat.test |> add_xy_position(fun = "mean_sd", x = a, dodge = 0.8)

  p2 <- p1 + stat_pvalue_manual(
      stat.test, label = "p.signif", 
      hide.ns = T, size = 8
      )

    plot_list[[i]] = p2

}

CairoPDF(file = "output/Fig4/2023_0424_Exp45_KD_select.pdf", height = 10, width = 8)
  for (i in 1:length(targets)) {
    print(plot_list[[i]])
  }
dev.off()
```

## eWAT

Jess extracted RNA and ran plates

```{r}
# eWAT Tfeb
mdat <- read_excel("data/qPCR/2023_0501_Exp45_eWAT__TFEB.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

mdat <- mdat[rowSums(is.na(mdat)) != ncol(mdat),]

# Remove standard rows
mdat <- mdat |> filter(Task == "UNKNOWN")

# Subset out the relevant data
Y <- mdat |> select(`Sample Name`, `Target Name`, 
                    `CT`, `Quantity Mean`,
                    `Ct SD`, `Quantity`)   


# Convert CT and quantity to number instead of character values
Y <- Y |> mutate(across(CT:Quantity, ~as.numeric(.))
                 )

# When the target was not present in the sample, the last 3 columns will have NA
# Replace NA with value (0) that will pass the filters 
Y <- Y |> mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)
                 )

Y <- Y |> mutate(`Ct SD` = ifelse(is.na(`Ct SD`), 0, `Ct SD`)
                 )
# Remove values with CT >30, CT SD > 0.90 [prefer 0.60 but data dependent]
Y <- Y |> filter(!CT > 30, !`Ct SD` > 0.90)

# Make gene name factor
Y$`Target Name` <- as.factor(Y$`Target Name`)

# Normalize to each samples RPS3
Y <- Y |> group_by(`Sample Name`) |>
  mutate(norm_quant = Quantity/mean(Quantity[`Target Name`=="RPS3"])
  )

# Remove RPS3
Y <- Y |> filter(!`Target Name` == "RPS3") |> 
  droplevels()

Y$Condition <- gsub(" [[:digit:]]+", "", Y$`Sample Name`)
Y$Condition <- gsub(" ", "_", Y$Condition)

Y$Condition <- factor(Y$Condition, 
                      levels = c("Con_RT", "Con_Cold",
                                 "KD_RT", "KD_Cold")
                      )

# Graph stuff
targets <-as.vector(names(table(Y$`Target Name`)))
plot_list <- list()

# Define x-axis variable
a = "Condition"

# Define y-axis variable
b = "norm_quant"

# Define additional variable related to color (if none, set equal to a)
c = a

for (i in 1:length(targets)) {
  temp <- Y |> filter(`Target Name` %in% targets[i]) |>
    droplevels()
  
  p0 <- ggbarplot(temp, x = a, y = b,
                  add = c("mean_sd", "dotplot"), 
                  color = a, fill = a, 
                  error.plot = "errorbar", 
                  add.params = list(width = 0.2, color = "grey23",
                  binwidth = 0.01*max(temp$norm_quant, na.rm = T)),
                  position = position_dodge(0.8), size = 0.10) + 
    scale_y_continuous(limits = c(0.00, 1.4*max(temp$norm_quant, na.rm = T)),
                       expand = c(0,0)
                       ) +
    scale_x_discrete(guide = guide_axis(angle = 45))
  
  p1 <- ggpar(p0, palette = pal_45, title = temp$`Target Name`[1],  
              xlab = "", ylab = "Normalized RNA Abundance") +
    scale_color_manual(values = c("black", "black", "black", "black")
                       ) +
    theme_bw(base_size = 16, base_family = "Arial")

  stat.test <- temp |>
    group_by(`Target Name`) |>
    t_test(norm_quant ~ Condition) |>
    adjust_pvalue(method = "none") %>%
    add_significance("p")
  
  stat.test$p.adj.signif <- stat.test$p.signif # If you don't run this, adjusted p-values plot
  stat.test <- stat.test |> add_xy_position(fun = "mean_sd", x = a, dodge = 0.8)

  p2 <- p1 + stat_pvalue_manual(
      stat.test, label = "p.signif", 
      hide.ns = T, size = 8
      )

    plot_list[[i]] = p2

}

CairoPDF(file = "output/Fig4/2023_0502_Exp45_KD_eWAT_all.pdf", height = 10, width = 8)
  for (i in 1:length(targets)) {
    print(plot_list[[i]])
  }
dev.off()
```

# 3. Exp 33 RT vs Cold

Might be Exp 7

```{r}
mdat <- read_excel("data/qPCR/2022_0405_PLA2G15_RTvCOLD_liver.xlsx",
                 sheet = 'Results', 
                 range = "A48:AK431", 
                 trim_ws = T)

mdat <- mdat[rowSums(is.na(mdat)) != ncol(mdat),]

# Remove standard rows
mdat <- mdat |> filter(Task == "UNKNOWN")

# Subset out the relevant data
Y <- mdat |> select(`Sample Name`, `Target Name`, 
                    `CT`, `Quantity Mean`,
                    `Ct SD`, `Quantity`)   


# Convert CT and quantity to number instead of character values
Y <- Y |> mutate(across(CT:Quantity, ~as.numeric(.))
                 )

# When the target was not present in the sample, the last 3 columns will have NA
# Replace NA with value (0) that will pass the filters 
Y <- Y |> mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)
                 )
# Remove values with CT >30, CT SD > 0.90 [prefer 0.60 but data dependent]
Y <- Y |> filter(!CT > 30, !`Ct SD` > 0.90)

# Make gene name factor
Y$`Target Name` <- as.factor(Y$`Target Name`)

# Normalize to each samples RPS3
Y <- Y |> group_by(`Sample Name`) |>
  mutate(norm_quant = Quantity/Quantity[`Target Name`=="RPS3"])

# Remove RPS3
Y <- Y |> filter(!`Target Name` == "RPS3") |> 
  droplevels()

Y$Condition <- gsub(" [[:digit:]]+", "", Y$`Sample Name`)
Y$Condition <- gsub(" ", "_", Y$Condition)
Y$Condition <- gsub("RT1", "RT", Y$Condition)

Y1 <- Y |> filter(Condition %in% c("T6_RT", "T6_Cold"),
                 `Target Name` == "PLA2G15"
                 ) |>
  droplevels()

Y1$Condition <- gsub("T6_", "", Y1$Condition)

Y1$Condition <- factor(Y1$Condition, 
                      levels = c('RT', 'Cold')
                      )

# Pla2g15 qPCR
p0 <- ggbarplot(Y1, x = "Condition", y = "norm_quant",
                  add = c("mean_sd", "dotplot"), 
                  color = "Condition", fill = "Condition", 
                  error.plot = "errorbar", 
                  add.params = list(width = 0.2,
                  binwidth = 0.015*max(Y1$norm_quant, na.rm = T)),
                  position = position_dodge(0.8), size = 0.10) + 
    scale_y_continuous(limits = c(0.00, 1.3*max(Y1$norm_quant, na.rm = T)),
                       expand = c(0,0)
                       ) 
  
p1 <- ggpar(p0, palette = pal_45, title = "Pla2g15 Expression",  
              xlab = "", ylab = "Normalized RNA Abundance") +
    scale_color_manual(values = c("black", "black")
                       ) +
    theme_bw(base_size = 16, base_family = "Arial")

stat.test <- Y1 |>
    group_by(`Target Name`) |>
    t_test(norm_quant ~ Condition) |>
    adjust_pvalue(method = "none") %>%
    add_significance("p")
  
stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test |>
  add_xy_position(fun = "mean_sd", x = "Condition", dodge = 0.8)

p2 <- p1 + stat_pvalue_manual(
  stat.test, label = "p.signif",
  hide.ns = T, size = 8)

p2

CairoPDF(file = "output/Fig5/Fig5B_Exp07_Pla2g15_qPCR.pdf",
         height = 8, width = 8)
  print(p2)
dev.off()
```

## Sylwia data

```{r}
# Sheet 01
mdat <- read_excel("data/qPCR/2023_0418_Exp33_Sylwia_liver_01.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Sheet 02
mdat <- read_excel("data/qPCR/2023_0418_Exp33_Sylwia_liver_02.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Sheet 03
mdat <- read_excel("data/qPCR/2023_0419_Exp33_Sylwia_liver_03.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Sheet 04
mdat <- read_excel("data/qPCR/2023_0424_Exp33_Sylwia_liver_04.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Sheet 05
mdat <- read_excel("data/qPCR/2023_0425_Exp33_Sylwia_liver_05.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Sheet 06
mdat <- read_excel("data/qPCR/2023_0425_Exp33_Sylwia_liver_06.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Sheet 07
mdat <- read_excel("data/qPCR/2023_0426_Exp33_Sylwia_liver_07.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)

# Sheet 08
mdat <- read_excel("data/qPCR/2023_0503_Exp33_Sylwia_liver_08.xls",
                 sheet = 'Results', 
                 range = "A38:AK377", 
                 trim_ws = T)


mdat <- mdat[rowSums(is.na(mdat)) != ncol(mdat),]

# Something is wrong with sample 2 for sheets 1-3 only
mdat <- mdat |> filter(!`Sample Name` == "Cold_2")

# Remove standard rows
mdat <- mdat |> filter(Task == "UNKNOWN")

# Subset out the relevant data
Y <- mdat |> select(`Sample Name`, `Target Name`, 
                    `CT`, `Quantity Mean`,
                    `Ct SD`, `Quantity`)   


# Convert CT and quantity to number instead of character values
Y <- Y |> mutate(across(CT:Quantity, ~as.numeric(.))
                 )

# When the target was not present in the sample, the last 3 columns will have NA
# Replace NA with value (0) that will pass the filters 
Y <- Y |> mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)
                 )
# Remove values with CT >30, CT SD > 0.90 [prefer 0.60 but data dependent]
Y <- Y |> filter(!CT > 30, !`Ct SD` > 0.90, !Quantity == 0) # For excel_02, set CT >29.4; for 6, >29; for 08 >29.3

# Make gene name factor
Y$`Target Name` <- as.factor(Y$`Target Name`)

# Normalize to each samples RPS3
Y <- Y |> group_by(`Sample Name`) |>
  mutate(norm_quant = Quantity/Quantity[`Target Name`=="Rps3"])

# Remove RPS3
Y <- Y |> filter(!`Target Name` %in% c("Rps3")) |>      # Remove smpd1 for sheet 6
  droplevels()

Y$Condition <- gsub("_[[:digit:]]+", "", Y$`Sample Name`)

Y$Condition <- factor(Y$Condition, 
                      levels = c("RT", "Cold")
                      )

# Graph stuff
targets <-as.vector(names(table(Y$`Target Name`)))
plot_list <- list()

# Define x-axis variable
a = "Condition"

# Define y-axis variable
b = "norm_quant"

# Define additional variable related to color (if none, set equal to a)
c = a

for (i in 1:length(targets)) {
  temp <- Y |> filter(`Target Name` %in% targets[i]) |>
    droplevels()
  
  p0 <- ggbarplot(temp, x = a, y = b,
                  add = c("mean_sd", "dotplot"), 
                  color = a, fill = a, 
                  error.plot = "errorbar", 
                  add.params = list(width = 0.2, color = "grey23",
                  binwidth = 0.015*max(temp$norm_quant, na.rm = T)),
                  position = position_dodge(0.8), size = 0.10) + 
    scale_y_continuous(limits = c(0.00, 1.3*max(temp$norm_quant, na.rm = T)),
                       expand = c(0,0)
                       )
  
  p1 <- ggpar(p0, palette = pal_45, title = temp$`Target Name`[1],
              legend = "none",
              xlab = "", ylab = "") +
    scale_color_manual(values = c("black", "black")
                       ) +
    theme_bw(base_size = 20, base_family = "Arial") +
    theme(legend.position = "none",
          axis.ticks.x = element_blank(),
          axis.text.x = element_blank())

  stat.test <- temp |>
    group_by(`Target Name`) |>
    t_test(norm_quant ~ Condition) |>
    adjust_pvalue(method = "none") %>%
    add_significance("p")
  
  stat.test$p.adj.signif <- stat.test$p.signif # If you don't run this, adjusted p-values plot
  stat.test <- stat.test |> add_xy_position(fun = "max", x = a, dodge = 0.8)

  p2 <- p1 + stat_pvalue_manual(bracket.nudge.y = 0.15,
      stat.test, label = "p.signif", 
      hide.ns = T, size = 14
      )

    plot_list[[i]] = p2

}

CairoPDF(file = "output/Fig2/2023_0503_Exp33_Sylwia_08_all.pdf", height = 10, width = 8)
  for (i in 1:length(targets)) {
    print(plot_list[[i]])
  }
dev.off()
```

# 4. Hepa1-6 KD

siTFEB samples. Note that 'control' is siRNA control for siTfeb and siAlg12, whereas siRNA nt is for siM6pr

```{r}
# siRNA KD validation
mdat <- read_excel("data/qPCR/2022_0929_siTFEB_qpcr1.xlsx",
                 sheet = 'Results', 
                 range = "A36:AK400", 
                 trim_ws = T)

# Pla2g15 expression
mdat2 <- read_excel("data/qPCR/2022_0404_siTFEB_qpcr2.xlsx",
                 sheet = 'Results', 
                 range = "A48:AK377", 
                 trim_ws = T)

mdat <- mdat[rowSums(is.na(mdat)) != ncol(mdat),]
mdat2 <- mdat2[rowSums(is.na(mdat2)) != ncol(mdat2),]

# Remove standard rows
mdat <- mdat |> filter(Task == "UNKNOWN")
mdat2 <- mdat2 |> filter(Task == "UNKNOWN")

mdat$`Target Name` <- gsub("-2", "", mdat$`Target Name`)
mdat2$`Target Name` <- gsub("Rps3", "RPS3", mdat2$`Target Name`)
mdat2$`Sample Name` <- gsub("siRNA ", "", mdat2$`Sample Name`)

# Subset out the relevant data; choose which mdat here
Y <- mdat |> select(`Sample Name`, `Target Name`, 
                    `CT`, `Quantity Mean`,
                    `Ct SD`, `Quantity`)   


# Convert CT and quantity to number instead of character values
Y <- Y |> mutate(across(CT:Quantity, ~as.numeric(.))
                 )

# When the target was not present in the sample, the last 3 columns will have NA
# Replace NA with value (0) that will pass the filters 
Y <- Y |> mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)
                 )
# Remove values with CT >30, CT SD > 0.90 [prefer 0.60 but data dependent]; for KD samples, loosen these values
Y <- Y |> filter(!CT > 32, !`Ct SD` > 0.90)

# To assess KD
Y <- Y |> filter(!Quantity == 0)

# Make gene name factor
Y$`Target Name` <- as.factor(Y$`Target Name`)

# Normalize to each samples RPS3
Y <- Y |> group_by(`Sample Name`) |>
  mutate(norm_quant = Quantity/Quantity[`Target Name`=="RPS3"])

# Remove RPS3
Y <- Y |> filter(!`Target Name` == "RPS3") |> 
  droplevels()

Y$Condition <- gsub(" [[:digit:]]+", "", Y$`Sample Name`)

# for mdat
Y$Condition <- factor(Y$Condition, 
                      levels = c("nt", "siTFEB",
                                 "LacZ", "TFEB OE"
                                 )
                      )

# for mdat2
Y$Condition <- factor(Y$Condition, 
                      levels = c("cntrl", "TFEB", "ALG12",
                                 "nt", "M6PR"
                                 )
                      )

# TFEB KD Validation
Y1 <- Y |> filter(`Target Name` == "mTFEB", Condition %in% c("nt", "siTFEB")) |>
  droplevels()

# Pla2g15
Y1 <- Y |> filter(`Target Name` == "PLA2G15", Condition %in% c("cntrl", "TFEB")) |>
  droplevels()

p0 <- ggbarplot(Y1, x = "Condition", y = "norm_quant",
                  add = c("mean_sd", "dotplot"), 
                  color = "Condition", fill = "Condition", 
                  error.plot = "errorbar", 
                  add.params = list(width = 0.2,
                  binwidth = 0.015*max(Y1$norm_quant, na.rm = T)),
                  position = position_dodge(0.8), size = 0.10) + 
    scale_y_continuous(limits = c(0.00, 1.3*max(Y1$norm_quant, na.rm = T)),
                       expand = c(0,0)
                       ) 
  
p1 <- ggpar(p0, palette = pal_cells[c(1,4)], title = "Hepa1-6 Pla2g15",  
              xlab = "", ylab = "Normalized RNA Abundance") +
    scale_color_manual(values = c("black", "black")
                       ) +
    theme_bw(base_size = 16, base_family = "Arial")

stat.test <- Y1 |>
  group_by(`Target Name`) |>
  t_test(norm_quant ~ Condition) |>
  adjust_pvalue(method = "none") %>%
  add_significance("p")
  
stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test |>
  add_xy_position(fun = "mean_sd", x = "Condition", dodge = 0.8)

p2 <- p1 + stat_pvalue_manual(
  stat.test, label = "p.signif",
  hide.ns = T, size = 8)

p2

CairoPDF(file = "output/Fig5/Fig5D_Hepa_siTFEB_qPCR_Pla2g15.pdf",
         height = 8, width = 8)
  print(p2)
dev.off()
```
