---
title: "ChIP Analysis"
format: html
editor: visual
---

# 1. Load packages

```{r, echo=FALSE, warning=FALSE}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(RColorBrewer)){install.packages("RColorBrewer")}
if(!require(ggsci)){install.packages("ggsci")}
if(!require(scales)){install.packages("scales")}
if(!require(Cairo)){install.packages("Cairo")}
if(!require(readxl)){install.packages("readxl")}
if(!require(rstatix)){install.packages("rstatix")}
if(!require(VennDiagram)){install.packages("VennDiagram")}
if(!require(futile.logger)){install.packages("futile.logger")}
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
pal_33 <- c("#D51317", "#164194")
show_col(pal_uchicago(palette = "default")(9))
  
pal_ChIP <- c("#767676FF", "#800000FF")
```

# 2. Load data

Use the annotated peaks file

```{r}
list.files("data/ChIP")

RT_CTD <- read_xlsx("data/ChIP/4_Rpb1_CTD_S14_L002_peaks_annotated_q.xlsx")
RT_TFEB <- read_xlsx("data/ChIP/4_TFEB_peaks_annotated_q.xlsx")
Cold_CTD <- read_xlsx("data/ChIP/10_Rpb1_CTD_S16_L002_peaks_annotated_q.xlsx")
Cold_TFEB <- read_xlsx("data/ChIP/10_TFEB_peaks_annotated_q.xlsx")
```

# 3. TSS Distance

TFEB ChIP

```{r}
names(RT_TFEB)[1] <- "Peak_ID"
RT_TFEB <- RT_TFEB |> mutate(sample = "RT")
names(Cold_TFEB)[1] <- "Peak_ID"
Cold_TFEB <- Cold_TFEB |> mutate(sample = "Cold")

mdat <- rbind(RT_TFEB, Cold_TFEB)
mdat$sample <- factor(mdat$sample, levels = c("RT", "Cold")
                      )
mdat$`Distance to TSS` <- as.numeric(mdat$`Distance to TSS`)
mdat1 <- mdat |> select(sample, `Distance to TSS`, `Gene Type`, `Gene Name`, Annotation) |> drop_na()

mdat2 <- mdat1 |> filter(`Distance to TSS` > -10000, `Distance to TSS` < 10000)

p0 <- gghistogram(mdat2, x = "Distance to TSS",
                  rug = FALSE, title = "TFEB ChIP",
                  color = "sample", fill = "sample",
                  palette = c("#E7B800", "#00AFBB"),
                  facet.by = "sample", scales = "free"
                  ) +
  scale_y_continuous(expand = c(0.05, 0.05)) + 
  theme_bw(base_family = "Arial", base_size = 12)

CairoPDF(file = "output/Fig3/SFig3A_Dist_TSS_TFEB.pdf",
         height = 8, width = 10)
  print(p0)
dev.off()
```

CTD

```{r}
names(RT_CTD)[1] <- "Peak_ID"
RT_CTD <- RT_CTD |> mutate(sample = "RT")
names(Cold_CTD)[1] <- "Peak_ID"
Cold_CTD <- Cold_CTD |> mutate(sample = "Cold")

mdat <- rbind(RT_CTD, Cold_CTD)
mdat$sample <- factor(mdat$sample, levels = c("RT", "Cold")
                      )
mdat$`Distance to TSS` <- as.numeric(mdat$`Distance to TSS`)
mdat1 <- mdat |> select(sample, `Distance to TSS`, `Gene Type`, `Gene Name`, Annotation) |> 
  drop_na()

mdat2 <- mdat1 |> filter(`Distance to TSS` > -10000, `Distance to TSS` < 10000)

gghistogram(mdat2, x = "Distance to TSS",
   rug = FALSE, title = "RNA Pol CTD ChIP",
   color = "sample", fill = "sample",
   palette = c("#E7B800", "#00AFBB"),
   facet.by = "sample", scales = "free",
   )
```

# 4. Venn Diagram of binding sites

## Total unique binding sites

not gonna work

```{r}
RT_TFEB <- RT_TFEB |> drop_na() |>
  mutate(Site = paste0(Chr, "_", Start, "_", End)
         ) 

Cold_TFEB <- Cold_TFEB |> drop_na() |>
  mutate(Site = paste0(Chr, "_", Start, "_", End)
         ) 

RT_sites <- as.vector(RT_TFEB$Site)
Cold_sites <- as.vector(Cold_TFEB$Site)

# Color scheme for Venn diagram
myCol_fill <- pal_33
myCol_text <- alpha(pal_33, 0.8)

# Make venn diagram
v <-  venn.diagram(x = list(RT_sites, Cold_sites),
             category.names = c("RT", "Cold"),   # title of each category in Venn diagram
             main = "Hepatic TFEB ChIP binding sites (q<0.05)", # plot title
             compression = "lzw",        # image compression
             fontfamily = "Arial",       # text font
             col = myCol_fill, fill = alpha(myCol_fill, 0.7), # fill colors
             cat.col = myCol_text,           # text colors
             cat.fontface = "bold" , cat.cex = 1, # font face and size
             cat.fontfamily = "Arial",            
             filename = NULL, resolution = 600,   # image resolution
             output = T)

CairoPDF(file = "output/Fig3/venn.pdf")
  grid.draw(v)
dev.off()
```

## Unique genes

```{r}
RT <- tolower(as.vector(unique(RT_TFEB$`Gene Name`)
                )
              )
Cold <- tolower(as.vector(unique(Cold_TFEB$`Gene Name`)
                  )
                )
# Color scheme for Venn diagram
myCol_fill <- pal_33
myCol_text <- alpha(pal_33, 0.8)

# Make venn diagram
v <-  venn.diagram(x = list(RT, Cold),
             category.names = c("RT", "Cold"),   # title of each category in Venn diagram
             main = "Hepatic TFEB ChIP binding sites to genes (q<0.05)", # plot title
             scaled = 0,
             compression = "lzw",        # image compression
             fontfamily = "Arial",
             main.fontfamily = "Arial",       # text font
             col = myCol_fill, fill = alpha(myCol_fill, 0.7), # fill colors
             cat.col = myCol_text,           # text colors
             cat.fontface = "bold" , cat.cex = 1, # font face and size
             cat.fontfamily = "Arial",            
             filename = NULL, resolution = 600,   # image resolution
             output = T)

CairoPDF(file = "output/Fig3/Fig3A_TFEB_venn_gene.pdf")
  grid.draw(v)
dev.off()
```

# 5. Pie charts

CTD binding regions (Annotation)

```{r}
names(RT_CTD)[1] <- "Peak_ID"
RT_CTD <- RT_CTD |> mutate(sample = "RT")
names(Cold_CTD)[1] <- "Peak_ID"
Cold_CTD <- Cold_CTD |> mutate(sample = "Cold")

mdat <- rbind(RT_CTD, Cold_CTD)
mdat$sample <- factor(mdat$sample, levels = c("RT", "Cold")
                      )

mdat1 <- mdat |> select(sample, Annotation, `Gene Type`) |> drop_na()
mdat1$Annotation <- gsub("[(]","", mdat1$Annotation)
mdat1$Annotation <- gsub(" N.*","", mdat1$Annotation)

mdat2 <- mdat1 |> filter(sample == "RT") |>
  count(Annotation)

mdat2$percent <- round(100*mdat2$n/sum(mdat2$n),2)
mdat2$Annot_label <- paste0(mdat2$Annotation, " (",
                            mdat2$percent,")"
                            )

p0 <- ggpie(mdat2, x = "n", label = "Annot_label", fill = "Annotation",
            color = "white", palette = "lancet", font.family = "Arial",
            size = 0.5)

p1 <- ggpar(p0, title = paste0("RT CTD (", sum(mdat2$n), " sites)")
            )

p1
```

TFEB binding regions (Annotation)

```{r}
names(RT_TFEB)[1] <- "Peak_ID"
RT_TFEB <- RT_TFEB |> mutate(sample = "RT")
names(Cold_TFEB)[1] <- "Peak_ID"
Cold_TFEB <- Cold_TFEB |> mutate(sample = "Cold")

mdat <- rbind(RT_TFEB, Cold_TFEB)
mdat$sample <- factor(mdat$sample, levels = c("RT", "Cold")
                      )

mdat1 <- mdat |> select(sample, Annotation, `Gene Type`) |> drop_na()
mdat1$Annotation <- gsub("[(]","", mdat1$Annotation)
mdat1$Annotation <- gsub(" N.*","", mdat1$Annotation)

mdat2 <- mdat1 |> filter(sample == "Cold") |>
  count(Annotation)

mdat2$percent <- round(100*mdat2$n/sum(mdat2$n),2)
mdat2$Annot_label <- paste0(mdat2$Annotation, " (",
                            mdat2$percent,")"
                            )

p0 <- ggpie(mdat2, x = "n", label = "Annot_label", fill = "Annotation",
            color = "white", palette = "lancet", font.family = "Arial",
            size = 0.5)

p1 <- ggpar(p0, title = paste0("Cold TFEB (", sum(mdat2$n), " sites)")
            )

CairoPDF(file = "output/Fig3/Fig3B_TFEB_Cold_Annotation.pdf",
         height = 8, width = 8)
  print(p1)
dev.off()
```

CTD binding regions (Gene Type)

```{r}
names(RT_CTD)[1] <- "Peak_ID"
RT_CTD <- RT_CTD |> mutate(sample = "RT")
names(Cold_CTD)[1] <- "Peak_ID"
Cold_CTD <- Cold_CTD |> mutate(sample = "Cold")

mdat <- rbind(RT_CTD, Cold_CTD)
mdat$sample <- factor(mdat$sample, levels = c("RT", "Cold")
                      )

mdat1 <- mdat |> select(sample, Annotation, `Gene Type`) |> drop_na()
mdat2 <- mdat1 |> filter(sample == "Cold") |>
  count(`Gene Type`)

mdat2$percent <- round(100*mdat2$n/sum(mdat2$n),2)
mdat2$Type_label <- paste0(mdat2$`Gene Type`, " (",
                            mdat2$percent,"%)"
                            )

p0 <- ggpie(mdat2, x = "n", label = "Type_label", fill = "Gene Type",
            color = "white", palette = "lancet", font.family = "Arial",
            size = 0.5)

p1 <- ggpar(p0, title = paste0("RT CTD (", sum(mdat2$n), " sites)")
            )

p1
```

TFEB binding regions (Gene Type)

```{r}
names(RT_TFEB)[1] <- "Peak_ID"
RT_TFEB <- RT_TFEB |> mutate(sample = "RT")
names(Cold_TFEB)[1] <- "Peak_ID"
Cold_TFEB <- Cold_TFEB |> mutate(sample = "Cold")

mdat <- rbind(RT_TFEB, Cold_TFEB)
mdat$sample <- factor(mdat$sample, levels = c("RT", "Cold")
                      )

mdat1 <- mdat |> select(sample, Annotation, `Gene Type`) |> drop_na()

mdat2 <- mdat1 |> filter(sample == "RT") |>
  count(`Gene Type`)

mdat2$percent <- round(100*mdat2$n/sum(mdat2$n),2)
mdat2$Type_label <- paste0(mdat2$`Gene Type`, " (",
                            mdat2$percent,"%)"
                            )

p0 <- ggpie(mdat2, x = "n", label = "Type_label", fill = "Gene Type",
            color = "white", palette = "lancet", font.family = "Arial",
            size = 0.5)

p1 <- ggpar(p0, title = paste0("RT TFEB (", sum(mdat2$n), " sites)")
            )

CairoPDF(file = "output/Fig3/SFig3B_TFEB_RT_Type.pdf",
         height = 8, width = 8)
  print(p1)
dev.off()
```

# 6. GO Analysis

```{r}
RT <- as.vector(unique(RT_TFEB$`Gene Name`)
                )
Cold <- as.vector(unique(Cold_TFEB$`Gene Name`)
                  )
shared <- RT[RT %in% Cold]
uni_cold <- Cold[!Cold %in% RT]

write_csv(data.frame(RT), file="data/ChIP/RT_genes_q.csv")
```

Run GO analysis online. Save table and delete top rows not containing pathway info.

```{r}
Cold_GO <- read_delim(file = "data/ChIP/TFEB_cold_q_reactome.txt")

# Remove similar pathways (based on fold change and description)
Cold_GO$ID <- rownames(Cold_GO)
Cold_GO <- Cold_GO |>
  filter(!ID %in% c("1","4","8", "5", "18", "21", "25", "28"))

RT_GO <- read_delim(file = "data/ChIP/TFEB_RT_q_reactome.txt")

# Remove similar pathways (based on fold change and description)
RT_GO$ID <- rownames(RT_GO)
RT_GO <- RT_GO |> filter(!ID == "10")

# Clean up names
Cold_GO$`Reactome pathways` <- gsub(" (omega3)", "", Cold_GO$`Reactome pathways`, fixed = T)
Cold_GO$`Reactome pathways` <- gsub(" (omega6)", "", Cold_GO$`Reactome pathways`, fixed = T)
Cold_GO$`Reactome pathways` <- gsub("R-MM.*", "", Cold_GO$`Reactome pathways`)
Cold_GO$`Reactome pathways` <- gsub(" (", "", Cold_GO$`Reactome pathways`, fixed = T)

RT_GO$`Reactome pathways` <- gsub("R-MM.*", "", RT_GO$`Reactome pathways`)
RT_GO$`Reactome pathways` <- gsub(" (", "", RT_GO$`Reactome pathways`, fixed = T)


names(Cold_GO)[3] <- "Genes"
names(RT_GO[3]) <- "Genes"

p0 <- ggplot(Cold_GO, aes(x=reorder(`Reactome pathways`, `upload_1 (fold Enrichment)`),
                          y=`upload_1 (fold Enrichment)`, fill = `upload_1 (FDR)`)
             ) +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 30)
                   ) +
  geom_bar(stat='identity') +
  ylab("Fold Enrichment") +
  xlab("Reactome") +
  ggtitle("Cold") +
  scale_fill_continuous(name = "FDR",
                        low = "#3C5488FF", high = "#4DBBD5FF") +
  scale_y_continuous(limits = c(0, 35),
                     expand= c(0,0)
                     ) +
  coord_flip() +
  theme_bw(base_size = 12, base_family = "Arial")
      
CairoPDF(file = "output/Fig3/Fig3D_TFEB_Reactome_Cold_q.pdf",
         height = 10, width = 12)
  print(p0)
dev.off()

RT_GO <- RT_GO[1:20,]
RT_GO <- RT_GO |>
  mutate(`upload_1 (fold Enrichment)` = as.numeric(`upload_1 (fold Enrichment)`)
         )

p0 <- ggplot(RT_GO, aes(x=reorder(`Reactome pathways`, `upload_1 (fold Enrichment)`), 
                        y=`upload_1 (fold Enrichment)`, fill = `upload_1 (FDR)`)
             ) +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 30)
                     ) +
  geom_bar(stat='identity') +
  ylab("Fold Enrichment") +
  xlab("Reactome") +
  ggtitle("RT") +
  scale_fill_continuous(name = "FDR",
                        low ="#DC0000FF", high = "#F39B7FFF") +
  scale_y_continuous(limits = c(0,5),
                     expand= c(0,0)
                     ) +
  coord_flip() +
  theme_bw(base_size = 12, base_family = "Arial")

CairoPDF(file = "output/Fig3/SFig3D_TFEB_Reactome_RT_q.pdf",
         height = 10, width = 8)
  print(p0)
dev.off()

```

# 7. Data overlay

```{r}
# Venn Diagram
tset <- read_csv("data/other/data_overlay.csv") # not sure where all the ChIP genes here are from but ignore
all_ChIP <- append(Cold, RT)

Proteomics <- tolower(tset$Proteomics[!is.na(tset$Proteomics)])
RNA <- tolower(tset$RNA[!is.na(tset$RNA)])
ChIP <- tolower(unique(all_ChIP[!is.na(all_ChIP)]))

show_col(pal_nejm(palette = c("default"), alpha = 1)(7))

myCol_fill <- c("#20854EFF", "#F39C12FF", "#7876B1FF")
myCol_text <- alpha(myCol_fill, 0.9)
v <-  venn.diagram(x = list(Proteomics, RNA, ChIP),
             category.names = c("Proteomics", "RNA-seq", "ChIP"),   # title of each category in Venn diagram
             main = "Overlay of data", # plot title
             compression = "lzw",        # image compression
             fontfamily = "Arial",       # text font
             col = myCol_fill, fill = alpha(myCol_fill, 0.6), # fill colors
             cat.col = myCol_text,           # text colors
             cat.fontface = "bold" , cat.cex = 1, # font face and size
             cat.fontfamily = "Arial",            
             filename = NULL, resolution = 600,   # image resolution
             output = T)

CairoPDF(file = "output/Fig5/Fig5A_Data_overlay_test.pdf")
  grid.draw(v)
dev.off()

shared <- ChIP[ChIP %in% Proteomics[Proteomics %in% RNA]]
print(shared)
```

# 8. Targeted ChIP-qPCR

From Gisela in 2022

```{r}
mdat <- read_csv("data/ChIP/2022_0220_Targeted_ChIP_bar.csv")
mdat$Group<-factor(mdat$Group)
mdat$`Target Name`<-factor(mdat$`Target Name`, 
                            levels = c("Ctsa", "Cers1",
                                       "Plin2", "Insig2")
                           )
names(mdat)[3] <- "Gene"
mdat$Group <- gsub("TFEB-IP", "TFEB", mdat$Group)

mdat <- mdat |> group_by(Gene) |>
  mutate(Normalized = Normalized/mean(Normalized[Group == "IgG"])
         )

p0 <- ggbarplot(mdat, x = "Gene", y = "Normalized",
                add = c("mean_sd", "dotplot"), color = "Group", fill = "Group", 
                error.plot = "errorbar", 
                add.params = list(width = 0.25,
                                  binwidth = .015*max(mdat$Normalized, na.rm = T)
                                  ),
                position = position_dodge(0.8), size = 0.15) +
  scale_y_continuous(limits = c(0.00, 1.20*max(mdat$Normalized, na.rm = T)
                                ),
                     expand = c(0,0)
                     )

p1 <- ggpar(p0, palette = pal_ChIP, legend = "right", legend.title = "IP Antibody", 
            title = "Liver ChIP-qPCR of TFEB targets",  
            xlab = "Gene Target", ylab = "Normalized quantity") +
  theme_bw(base_size = 18, base_family = "Arial") + 
  theme(text = element_text(face = "bold", size = 18, family = "Arial")
        ) +
  scale_color_manual(values = c("black", "black"))

stat.test <- mdat |>
  group_by(Gene) |>
  na.omit() |>
  t_test(Normalized ~ Group) |>
  adjust_pvalue(method = "none") |>
  add_significance("p")

stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test |>
  na.omit() |>
  add_xy_position(fun = "max", "Gene", dodge = 0.8) 

p2 <- p1 + stat_pvalue_manual(stat.test, size = 12, step.increase = -0.02,
                              tip.length = 0.02, hide.ns = T)

CairoPDF(file = "output/Fig3/SFig3C_targeted_ChIP_qPCR.pdf",
         height = 10, width = 14)
  print(p2)
dev.off()
```

# Old

This code covers analysis of transcription factor EB ChIP-seq data.

http://bioconductor.org/packages/devel/bioc/vignettes/ChIPseeker/inst/doc/ChIPseeker.html#abstract https://www.biostars.org/p/274689/ https://hbctraining.github.io/Intro-to-ChIPseq/lessons/05_peak_calling_macs.html

```{r}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
if(!require(GO.db)){BiocManager::install("GO.db")}
if(!require(HDO.db)){BiocManager::install("HDO.db")}
if(!require(clusterProfiler)){BiocManager::install("clusterProfiler")}
if(!require(ChIPseeker)){BiocManager::install("ChIPseeker")}
if(!require(plyranges)){BiocManager::install("plyranges")}
library(ChIPseeker)
library(clusterProfiler)

RT_CTD$Annot_new <- gsub(" .*", "", RT_CTD$Annotation)
RT_TFEB$Annot_new <- gsub(" .*", "", RT_TFEB$Annotation)
RT_only <- merge(RT_CTD, RT_TFEB, by = c("Gene Name", "Annotation"))
RT_only$label_me <- ifelse(RT_only$`Gene Name` == "Pla2g15", T, F)

p0 <- RT_only |> filter(Annot_new.x == "promoter-TSS") |>
  ggplot(aes(log10(`Peak Score.x`), log10(`Peak Score.y`), 
           color = label_me,
           fill = label_me,
           name = `Gene Name`
           )
         ) + geom_point()
plotly::ggplotly(p0)

p0 <- RT_only |> filter(Annot_new.x == "Intergenic") |>
  ggplot(aes(log10(`Peak Score.x`), log10(`Peak Score.y`), 
           color = label_me,
           fill = label_me,
           name = `Gene Name`
           )
         ) + geom_point()
plotly::ggplotly(p0)

### Cold
Cold_CTD$Annot_new <- gsub(" .*", "", Cold_CTD$Annotation)
Cold_TFEB$Annot_new <- gsub(" .*", "", Cold_TFEB$Annotation)
Cold_only <- merge(Cold_CTD, Cold_TFEB, by = c("Gene Name", "Annotation"))
Cold_only$label_me <- ifelse(Cold_only$`Gene Name` == "Pla2g15", T, F)

p0 <- Cold_only |> filter(Annot_new.x == "promoter-TSS") |>
  ggplot(aes(log10(`Peak Score.x`), log10(`Peak Score.y`), 
           color = label_me,
           fill = label_me,
           name = `Gene Name`
           )
         ) + geom_point()
plotly::ggplotly(p0)

p0 <- Cold_only |> filter(Annot_new.x == "Intergenic") |>
  ggplot(aes(log10(`Peak Score.x`), log10(`Peak Score.y`), 
           color = label_me,
           fill = label_me,
           name = `Gene Name`
           )
         ) + geom_point()
plotly::ggplotly(p0)
```
